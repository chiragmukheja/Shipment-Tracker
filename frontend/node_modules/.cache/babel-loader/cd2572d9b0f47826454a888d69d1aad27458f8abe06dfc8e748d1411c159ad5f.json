{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nexport const fetchShipments = createAsyncThunk(\"shipments/fetchShipments\", async (_, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch(\"http://localhost:5000/api/shipments\");\n    if (!response.ok) throw new Error(\"Failed to fetch shipments\");\n    return await response.json();\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nexport const fetchShipmentById = createAsyncThunk(\"shipments/fetchShipmentById\", async (shipmentId, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch(`http://localhost:5000/api/shipment/${shipmentId}`);\n    if (!response.ok) throw new Error(\"Failed to fetch shipment details\");\n    return await response.json();\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nexport const updateShipmentLocation = createAsyncThunk(\"shipments/updateShipmentLocation\", async ({\n  shipmentId,\n  newLocation\n}, {\n  dispatch,\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch(`http://localhost:5000/api/shipment/${shipmentId}/update-location`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        currentLocation: newLocation\n      })\n    });\n    if (!response.ok) throw new Error(\"Failed to update location\");\n    const data = await response.json();\n    dispatch(fetchShipments());\n    dispatch(fetchShipmentById(shipmentId));\n    return data;\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nconst shipmentSlice = createSlice({\n  name: \"shipments\",\n  initialState: {\n    list: [],\n    selectedShipment: null,\n    loading: false,\n    error: null\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchShipments.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(fetchShipments.fulfilled, (state, action) => {\n      state.loading = false;\n      state.list = action.payload;\n    }).addCase(fetchShipments.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    }).addCase(fetchShipmentById.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(fetchShipmentById.fulfilled, (state, action) => {\n      state.loading = false;\n      state.selectedShipment = action.payload;\n    }).addCase(fetchShipmentById.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    }).addCase(updateShipmentLocation.pending, state => {\n      state.loading = true;\n    }).addCase(updateShipmentLocation.fulfilled, state => {\n      state.loading = false;\n    }).addCase(updateShipmentLocation.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    });\n  }\n});\nexport default shipmentSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","fetchShipments","_","rejectWithValue","response","fetch","ok","Error","json","error","message","fetchShipmentById","shipmentId","updateShipmentLocation","newLocation","dispatch","method","headers","body","JSON","stringify","currentLocation","data","shipmentSlice","name","initialState","list","selectedShipment","loading","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","reducer"],"sources":["D:/8th sem/Cargo-Shipment-Tracker/frontend/src/redux/shipmentSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\n\nexport const fetchShipments = createAsyncThunk(\n  \"shipments/fetchShipments\",\n  async (_, { rejectWithValue }) => {\n    try {\n      const response = await fetch(\"http://localhost:5000/api/shipments\");\n      if (!response.ok) throw new Error(\"Failed to fetch shipments\");\n      return await response.json();\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  }\n);\n\n\nexport const fetchShipmentById = createAsyncThunk(\n  \"shipments/fetchShipmentById\",\n  async (shipmentId, { rejectWithValue }) => {\n    try {\n      const response = await fetch(`http://localhost:5000/api/shipment/${shipmentId}`);\n      if (!response.ok) throw new Error(\"Failed to fetch shipment details\");\n      return await response.json();\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  }\n);\n\n\nexport const updateShipmentLocation = createAsyncThunk(\n    \"shipments/updateShipmentLocation\",\n    async ({ shipmentId, newLocation }, { dispatch, rejectWithValue }) => {\n      try {\n        const response = await fetch(\n          `http://localhost:5000/api/shipment/${shipmentId}/update-location`,\n          {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({ currentLocation: newLocation }),\n          }\n        );\n  \n        if (!response.ok) throw new Error(\"Failed to update location\");\n  \n        const data = await response.json();\n  \n        \n        dispatch(fetchShipments());\n        dispatch(fetchShipmentById(shipmentId));\n  \n        return data;\n      } catch (error) {\n        return rejectWithValue(error.message);\n      }\n    }\n  );\n  \n\nconst shipmentSlice = createSlice({\n  name: \"shipments\",\n  initialState: { list: [], selectedShipment: null, loading: false, error: null },\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchShipments.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(fetchShipments.fulfilled, (state, action) => {\n        state.loading = false;\n        state.list = action.payload;\n      })\n      .addCase(fetchShipments.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload;\n      })\n      .addCase(fetchShipmentById.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(fetchShipmentById.fulfilled, (state, action) => {\n        state.loading = false;\n        state.selectedShipment = action.payload;\n      })\n      .addCase(fetchShipmentById.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload;\n      })\n      .addCase(updateShipmentLocation.pending, (state) => {\n        state.loading = true;\n      })\n      .addCase(updateShipmentLocation.fulfilled, (state) => {\n        state.loading = false;\n      })\n      .addCase(updateShipmentLocation.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload;\n      });\n  },\n});\n\nexport default shipmentSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAGhE,OAAO,MAAMC,cAAc,GAAGD,gBAAgB,CAC5C,0BAA0B,EAC1B,OAAOE,CAAC,EAAE;EAAEC;AAAgB,CAAC,KAAK;EAChC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAqC,CAAC;IACnE,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;IAC9D,OAAO,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,OAAON,eAAe,CAACM,KAAK,CAACC,OAAO,CAAC;EACvC;AACF,CACF,CAAC;AAGD,OAAO,MAAMC,iBAAiB,GAAGX,gBAAgB,CAC/C,6BAA6B,EAC7B,OAAOY,UAAU,EAAE;EAAET;AAAgB,CAAC,KAAK;EACzC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,sCAAsCO,UAAU,EAAE,CAAC;IAChF,IAAI,CAACR,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,kCAAkC,CAAC;IACrE,OAAO,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,OAAON,eAAe,CAACM,KAAK,CAACC,OAAO,CAAC;EACvC;AACF,CACF,CAAC;AAGD,OAAO,MAAMG,sBAAsB,GAAGb,gBAAgB,CAClD,kCAAkC,EAClC,OAAO;EAAEY,UAAU;EAAEE;AAAY,CAAC,EAAE;EAAEC,QAAQ;EAAEZ;AAAgB,CAAC,KAAK;EACpE,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,sCAAsCO,UAAU,kBAAkB,EAClE;MACEI,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEC,eAAe,EAAEP;MAAY,CAAC;IACvD,CACF,CAAC;IAED,IAAI,CAACV,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;IAE9D,MAAMe,IAAI,GAAG,MAAMlB,QAAQ,CAACI,IAAI,CAAC,CAAC;IAGlCO,QAAQ,CAACd,cAAc,CAAC,CAAC,CAAC;IAC1Bc,QAAQ,CAACJ,iBAAiB,CAACC,UAAU,CAAC,CAAC;IAEvC,OAAOU,IAAI;EACb,CAAC,CAAC,OAAOb,KAAK,EAAE;IACd,OAAON,eAAe,CAACM,KAAK,CAACC,OAAO,CAAC;EACvC;AACF,CACF,CAAC;AAGH,MAAMa,aAAa,GAAGxB,WAAW,CAAC;EAChCyB,IAAI,EAAE,WAAW;EACjBC,YAAY,EAAE;IAAEC,IAAI,EAAE,EAAE;IAAEC,gBAAgB,EAAE,IAAI;IAAEC,OAAO,EAAE,KAAK;IAAEnB,KAAK,EAAE;EAAK,CAAC;EAC/EoB,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAAC/B,cAAc,CAACgC,OAAO,EAAGC,KAAK,IAAK;MAC1CA,KAAK,CAACN,OAAO,GAAG,IAAI;MACpBM,KAAK,CAACzB,KAAK,GAAG,IAAI;IACpB,CAAC,CAAC,CACDuB,OAAO,CAAC/B,cAAc,CAACkC,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MACpDF,KAAK,CAACN,OAAO,GAAG,KAAK;MACrBM,KAAK,CAACR,IAAI,GAAGU,MAAM,CAACC,OAAO;IAC7B,CAAC,CAAC,CACDL,OAAO,CAAC/B,cAAc,CAACqC,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MACnDF,KAAK,CAACN,OAAO,GAAG,KAAK;MACrBM,KAAK,CAACzB,KAAK,GAAG2B,MAAM,CAACC,OAAO;IAC9B,CAAC,CAAC,CACDL,OAAO,CAACrB,iBAAiB,CAACsB,OAAO,EAAGC,KAAK,IAAK;MAC7CA,KAAK,CAACN,OAAO,GAAG,IAAI;MACpBM,KAAK,CAACzB,KAAK,GAAG,IAAI;IACpB,CAAC,CAAC,CACDuB,OAAO,CAACrB,iBAAiB,CAACwB,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MACvDF,KAAK,CAACN,OAAO,GAAG,KAAK;MACrBM,KAAK,CAACP,gBAAgB,GAAGS,MAAM,CAACC,OAAO;IACzC,CAAC,CAAC,CACDL,OAAO,CAACrB,iBAAiB,CAAC2B,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MACtDF,KAAK,CAACN,OAAO,GAAG,KAAK;MACrBM,KAAK,CAACzB,KAAK,GAAG2B,MAAM,CAACC,OAAO;IAC9B,CAAC,CAAC,CACDL,OAAO,CAACnB,sBAAsB,CAACoB,OAAO,EAAGC,KAAK,IAAK;MAClDA,KAAK,CAACN,OAAO,GAAG,IAAI;IACtB,CAAC,CAAC,CACDI,OAAO,CAACnB,sBAAsB,CAACsB,SAAS,EAAGD,KAAK,IAAK;MACpDA,KAAK,CAACN,OAAO,GAAG,KAAK;IACvB,CAAC,CAAC,CACDI,OAAO,CAACnB,sBAAsB,CAACyB,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MAC3DF,KAAK,CAACN,OAAO,GAAG,KAAK;MACrBM,KAAK,CAACzB,KAAK,GAAG2B,MAAM,CAACC,OAAO;IAC9B,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,eAAed,aAAa,CAACgB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}